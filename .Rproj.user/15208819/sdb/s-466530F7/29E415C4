{
    "contents" : "# Data Products - Course Project: Population projections & pyramids\n# RScript: server.R - Ian, 16 November 2015\n#\n# Performs a population projection that depends on assumptions about\n# future total fertility determined by the user and then produces\n# an interactive population pyramid for a year chosen by them.\n#\n# Requires shiny and rCharts (HighCharts library) anmd reshape2.\n#\n# The formatting of the pyramid uses code developed by Kyle Walker:\n# http://walkerke.github.io/2014/06/rcharts-pyramids/)\n#\n\nlibrary(shiny)\nrequire(rCharts)\nrequire(reshape2)\n\n# asfr - function to split the TFR into 7 age-specific fertility rates\nasfr <- function(tfr) tfr * c(0.043, 0.168, 0.269, 0.304,\n                              0.174, 0.037, 0.003)\n\n# project_step - function to project a population 5 years forward\n#   inPop - initial population for 20 five-year age groups by sex\n#   Px - five-year surviviorship ratios for the projection interval\n#   fx - 5-year age-specific fertility rates for the projection interval\n#   migrants - number of net in-migrants during the projection interval\nproject_step <- function(inpop, Px, fx, migrants) {\n   outpop <- inpop\n   # Survive those aged <90 at the outset and add in the migrants\n   outpop[2:19, ] <- inpop[1:18, ] * Px[2:19, ] + migrants[2:19, ]\n   # Add the surviving centenarians back into the 95+ age group\n   outpop[20, ] <- (inpop[19, ] + inpop[20, ])*Px[20, ] + migrants[20, ]\n   # Calculate female births assuming a sex ratio at birth of 1.06\n   outpop[1, 2] <- sum(fx * (inpop[4:10, 2] + outpop[4:10, 2]) /2) /2.06\n   # and the baby boys\n   outpop[1, 1] <- outpop[1, 2] * 1.06\n   # Survive the births into the 0-4 age group anmd add m,igranmts\n   outpop[1, ] <- outpop[1, ] * Px[1, ] + migrants[1, ]\n   return(outpop)\n}\n# Define the initial population and dynamics (Input data from\n# www.ons.gov.uk/ons/rel/npp/national-population-projections/index.html)\nMen <- c(2059, 2021, 1813, 1962, 2203, 2240, 2179, 2029, 2124, 2280,\n         2249, 1949, 1713, 1754, 1295, 992, 679, 368, 137, 26)\nWomen <- c(1959, 1928, 1730, 1858, 2117, 2215, 2203, 2046, 2169,\n           2346, 2312, 1999, 1785, 1858, 1428, 1170, 905, 603, 304, 80)\ninitPop <- data.frame(cbind(Men, Women))\nSurvivorship <- read.csv(\"survivorship.csv\")\nNetMigrants = c(23.0, 13.4, 15.5, 88.8, 183.4, 93.2, 26.1, -1.1, -13.5,\n                6.4, 1.0, -3.9, 0.4, 0.8, 0.6, 0.8, 0.4, 0.2, 0.0, 0.0,\n                18.5, 13.9, 9.6, 87.9, 164.8, 51.3, 21.7, 1.8, 0.9, 3.0,\n                4.4, 1.7, 3.0, 3.0, 2.0, 1.2, 0.5, 0.2, 0.0, 0.0)\ndim(NetMigrants) <- c(20,2)\n\nshinyServer(function(input, output) {\n   # The projection is done using reactive functions so that it is only\n   # recalculated when total fertility is changed, not every time the\n   # population pyramid is redrawn\n\n   # Assemble 35-years worth of TFRs from input sliders and interpolation\n   tfr <- reactive({\n            c(as.numeric(input$TFR2015),\n            (as.numeric(input$TFR2015) + as.numeric(input$TFR2025)) / 2,\n            as.numeric(input$TFR2025),\n            (as.numeric(input$TFR2025) + as.numeric(input$TFR2035)) / 2,\n            as.numeric(input$TFR2035),\n            (as.numeric(input$TFR2035) + as.numeric(input$TFR2045)) / 2,\n            as.numeric(input$TFR2045))\n   })\n   # Do the 35-year population projection using the user-defined ASFRs\n   projPop1 <- reactive({project_step(initPop, Survivorship[, 1:2],\n      asfr(tfr()[1]), NetMigrants)})\n#  Either the dumb programmer or shiny cannot do this in a loop. This is\n#  probably because the reactive functions for each i get nested and 8\n#  levels of nesting is too much for shiny. Or it may be that I'm dumb.\n#     for (i in 2:8) {\n#       assign(paste0(\"projPop\", i), reactive({\n#          project_step(eval(as.symbol(paste0(\"projPop\", i-1)))(),\n#             Survivorship, asfr(tfr()[i]), NetMigrants)\n#          })\n#       )\n#    }\n   projPop2 <- reactive({project_step(projPop1(), Survivorship[, 3:4],\n      asfr(tfr()[2]), NetMigrants)})\n   projPop3 <- reactive({project_step(projPop2(), Survivorship[, 5:6],\n      asfr(tfr()[3]), NetMigrants)})\n   projPop4 <- reactive({project_step(projPop3(), Survivorship[, 7:8],\n      asfr(tfr()[4]), NetMigrants)})\n   projPop5 <- reactive({project_step(projPop4(), Survivorship[, 9:10],\n      asfr(tfr()[5]), NetMigrants)})\n   projPop6 <- reactive({project_step(projPop5(), Survivorship[, 11:12],\n      asfr(tfr()[6]), NetMigrants)})\n   projPop7 <- reactive({project_step(projPop6(), Survivorship[, 13:14],\n      asfr(tfr()[7]), NetMigrants)})\n\n   # Render textual output line\n   output$Year <- renderText({\n      i <- match(input$Year, c(\"2015\", \"2020\", \"2025\", \"2030\",\n                               \"2035\", \"2040\", \"2045\", \"2050\"))\n      totalPop <- round(sum(if (i==1) initPop\n         else eval(as.symbol(paste0(\"projPop\", i-1)))())/1000, 1)\n      paste0(\"Selected year = \", input$Year, \". Total population = \",\n            totalPop, \" million\")})\n   # Render population pyramid using rCharts\n   output$pyramid <- renderChart2({\n      # Set up data for the pyramid for the year selected by user\n      ageGp <- c(\" 0- 4\", \" 5- 9\", \"10-14\", \"15-19\", \"20-24\", \"25-29\",\n                 \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\",\n                 \"60-64\", \"65-69\", \"70-74\", \"75-79\", \"80-84\", \"85-89\",\n                 \"90-94\", \"95+\")\n      # rev as in reverse to get the kids at the bottom of the pyramid\n      Age <- factor(ageGp, levels = rev(ageGp), labels = rev(ageGp))\n      i <- match(input$Year, c(\"2015\", \"2020\", \"2025\", \"2030\",\n                               \"2035\", \"2040\", \"2045\", \"2050\"))\n      chosenPop <- if (i==1) initPop\n         else eval(as.symbol(paste0(\"projPop\", i-1)))()\n      # Melt data frame for selected year\n      plotData <- melt(cbind(Age, chosenPop),\n         variable.name = \"Sex\", id.vars = \"Age\",\n         value.name = \"Population\")\n      # Make values for men negative so that they plot to the left\n      plotData$Population[plotData$Sex == \"Men\"] <-\n         -plotData$Population[plotData$Sex == \"Men\"]\n      # Draw plot using hPlot (Highcharts library)\n      h <- hPlot(y = 'Population', x = 'Age', type = 'bar',\n         data = plotData, group = 'Sex')\n      h$plotOptions(series = list(stacking = 'normal',\n         pointPadding = 0, borderWidth = 0))\n      h$yAxis(labels = list(formatter = \"#! function()\n            {return(Math.abs(this.value));} !#\"),\n         title = list(enabled = TRUE, text = \"Population ('000s)\"))\n      h$colors(\"steelblue\", \"plum\")\n      h$tooltip(formatter = \"#! function() {return'<b>'+\n         this.series.name +', Age '+\n         this.point.category +'</b><br/>'+'<b>Population: </b>'+\n         Highcharts.numberFormat(Math.abs(this.point.y), 0);\n         } !#\")\n      return(h)\n   })\n})\n# ProjectionsProject. Copyright (C) 2015 - Ian Timaeus.\n# This program comes with ABSOLUTELY NO WARRANTY;\n# this is free software, and you are welcome to redistribute it\n# under certain conditions; see http://www.gnu.org/licenses/gpl.html\n",
    "created" : 1447695222230.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "423697640",
    "id" : "29E415C4",
    "lastKnownWriteTime" : 1447697694,
    "path" : "D:/Ian/git/datasciencecoursera/DataProducts/ProjectionsProject/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}